// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230808091527_update1")]
    partial class update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinancePurposeDefinition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductMatrixId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.Property<int>("RequestedTenor")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductMatrixId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Borrowers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FinnhubIndustry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IPO")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("MarketCapitalization")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ShareOutstanding")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Type");

                    b.ToTable("CompanyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b49e6400-f740-4d42-bf96-dff30937e79a"),
                            Type = "Sole Proprietorship"
                        },
                        new
                        {
                            Id = new Guid("2b40e4ec-1447-4c4b-a5fc-75d3952d7929"),
                            Type = "Other"
                        },
                        new
                        {
                            Id = new Guid("867dfba2-01f7-45c7-8072-5353b2a65de7"),
                            Type = "Partnership Limited by Shares"
                        },
                        new
                        {
                            Id = new Guid("f51c57fd-7e6c-436a-ad50-f28e41fe53ca"),
                            Type = "Limited Partnership"
                        },
                        new
                        {
                            Id = new Guid("04aa56ad-f172-4d2a-8cbf-0d4d5c5f094a"),
                            Type = "Cooperative Society"
                        },
                        new
                        {
                            Id = new Guid("40c976c2-db8f-4aa5-90df-97c01372f2b0"),
                            Type = "General Partnership"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BorrowerCompanyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaxTenor")
                        .HasColumnType("int");

                    b.Property<int>("MinTenor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("89134181-5289-417a-bc73-b83095569368"),
                            BorrowerCompanyType = "Cooperative Society",
                            MaxTenor = 0,
                            MinTenor = 30,
                            Name = "PMI BTECH",
                            RequestedAmount = 100000
                        },
                        new
                        {
                            Id = new Guid("e0b40194-d4d5-4f4e-91bd-01d43926399d"),
                            BorrowerCompanyType = "Partnership Limited by Shares",
                            MaxTenor = 60,
                            MinTenor = 40,
                            Name = "AZIF",
                            RequestedAmount = 400000
                        },
                        new
                        {
                            Id = new Guid("ad981a0c-86c9-4ae3-9a89-2102a5c9e850"),
                            BorrowerCompanyType = "Sole Proprietorship",
                            MaxTenor = 60,
                            MinTenor = 30,
                            Name = "PMI BTECH",
                            RequestedAmount = 100000
                        });
                });

            modelBuilder.Entity("Domain.Entities.LenderMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductMatrices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ReferenceRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("LenderId");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d748f52-561e-4704-8a29-acb963c9c0ab"),
                            Name = "IsSuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("98f1d261-e838-4186-8c0d-c0d96d0d3bf4"),
                            Name = "CanReadBorrowers"
                        },
                        new
                        {
                            Id = new Guid("b8606038-84c7-4661-ac73-22344c22033a"),
                            Name = "IsRegistered"
                        },
                        new
                        {
                            Id = new Guid("3e5bed87-925b-42c3-b9a8-f07b6990a410"),
                            Name = "CanAddBorrower"
                        },
                        new
                        {
                            Id = new Guid("b12f238e-4aff-43ea-8dde-a5a03db886e4"),
                            Name = "CanUpdateBorrower"
                        },
                        new
                        {
                            Id = new Guid("08e9525b-37d5-46d6-877e-104675d1c14b"),
                            Name = "CanDeleteBorrower"
                        },
                        new
                        {
                            Id = new Guid("6dc8c3f5-51ef-4fc5-9991-e004bfa28cc2"),
                            Name = "CanReadApplications"
                        },
                        new
                        {
                            Id = new Guid("d36c92ce-ce45-4799-95c2-00928794fd7f"),
                            Name = "CanUpdateApplication"
                        },
                        new
                        {
                            Id = new Guid("497890a5-8b1b-46d3-a941-92afee79c271"),
                            Name = "CanAddApplication"
                        },
                        new
                        {
                            Id = new Guid("076fd221-24a4-49d3-84ae-010446253b44"),
                            Name = "CanDeleteApplication"
                        },
                        new
                        {
                            Id = new Guid("a4c76dc8-e376-429e-be0d-4a1c3b98b639"),
                            Name = "CanReadOwnApplications"
                        },
                        new
                        {
                            Id = new Guid("3a5a8ef3-cef3-4a58-9d11-40a160925fd6"),
                            Name = "CanReadOwnBorrowers"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("FinanceMaxAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("FinanceMinAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ReferenceRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6727daa-e20c-429b-bd6d-d3ab89a29484"),
                            Description = "Installments with pre-amortization at a fixed rate",
                            FinanceMaxAmount = 2000000.00m,
                            FinanceMinAmount = 10000.00m,
                            Name = "Installments with pre-amortization at a fixed rate",
                            ReferenceRate = 0.0025m
                        },
                        new
                        {
                            Id = new Guid("df4e0010-1a04-4cc0-926d-7e6c2d5a39d7"),
                            Description = "Installment with variable rate pre-amortization",
                            FinanceMaxAmount = 2000000.00m,
                            FinanceMinAmount = 10000.00m,
                            Name = "Installment with variable rate pre-amortization",
                            ReferenceRate = 0.03m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aafe37e4-8ee6-4e83-91af-1289fe4a067d"),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("ad493941-b7c7-4e31-8b13-de8d0ca34b62"),
                            Name = "LoanOfficer"
                        },
                        new
                        {
                            Id = new Guid("8668b4c8-f48b-475c-9535-5ec6c7fc1b27"),
                            Name = "RegisteredUser"
                        },
                        new
                        {
                            Id = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            Name = "Borrower"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("aafe37e4-8ee6-4e83-91af-1289fe4a067d"),
                            PermissionId = new Guid("0d748f52-561e-4704-8a29-acb963c9c0ab")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("3a5a8ef3-cef3-4a58-9d11-40a160925fd6")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("3e5bed87-925b-42c3-b9a8-f07b6990a410")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("08e9525b-37d5-46d6-877e-104675d1c14b")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("b12f238e-4aff-43ea-8dde-a5a03db886e4")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("497890a5-8b1b-46d3-a941-92afee79c271")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("a4c76dc8-e376-429e-be0d-4a1c3b98b639")
                        },
                        new
                        {
                            RoleId = new Guid("2da9c28e-e557-44c5-bbd9-8978f5c1c9f3"),
                            PermissionId = new Guid("076fd221-24a4-49d3-84ae-010446253b44")
                        },
                        new
                        {
                            RoleId = new Guid("8668b4c8-f48b-475c-9535-5ec6c7fc1b27"),
                            PermissionId = new Guid("b8606038-84c7-4661-ac73-22344c22033a")
                        },
                        new
                        {
                            RoleId = new Guid("8668b4c8-f48b-475c-9535-5ec6c7fc1b27"),
                            PermissionId = new Guid("3e5bed87-925b-42c3-b9a8-f07b6990a410")
                        },
                        new
                        {
                            RoleId = new Guid("ad493941-b7c7-4e31-8b13-de8d0ca34b62"),
                            PermissionId = new Guid("d36c92ce-ce45-4799-95c2-00928794fd7f")
                        },
                        new
                        {
                            RoleId = new Guid("ad493941-b7c7-4e31-8b13-de8d0ca34b62"),
                            PermissionId = new Guid("6dc8c3f5-51ef-4fc5-9991-e004bfa28cc2")
                        },
                        new
                        {
                            RoleId = new Guid("ad493941-b7c7-4e31-8b13-de8d0ca34b62"),
                            PermissionId = new Guid("98f1d261-e838-4186-8c0d-c0d96d0d3bf4")
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoginTries")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3f6a1c8-41ad-4b4a-8a0b-f95c6a912257"),
                            Email = "kevin.shemili@cardoai.com",
                            FirstName = "Kevin",
                            IsBlocked = false,
                            IsEmailConfirmed = true,
                            LastName = "Shemili",
                            LoginTries = 0,
                            PasswordHash = "nsslp9QXF6wOvaGzfIHsoI+23nH+e8+l1SD8bv0IFrI=",
                            PasswordSalt = "jWRLoRafDBcFS72uPEqyqg==",
                            PhoneNumber = "683363203",
                            Prefix = "+355",
                            Username = "kevinshemili1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserVerificationAndReset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("UserVerificationAndReset", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User_Role", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b3f6a1c8-41ad-4b4a-8a0b-f95c6a912257"),
                            RoleId = new Guid("aafe37e4-8ee6-4e83-91af-1289fe4a067d")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithMany("Applications")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LenderMatrix", "ProductMatrix")
                        .WithMany()
                        .HasForeignKey("ProductMatrixId");

                    b.Navigation("Borrower");

                    b.Navigation("Product");

                    b.Navigation("ProductMatrix");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.HasOne("Domain.Entities.CompanyType", "CompanyType")
                        .WithMany("Borrowers")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Borrowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("Domain.Entities.CompanyProfile", "BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationEntity", "Application")
                        .WithOne("Loan")
                        .HasForeignKey("Domain.Entities.Loan", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lender", "Lender")
                        .WithMany("Loans")
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Lender");
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UserVerificationAndReset", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("UserVerificationAndReset")
                        .HasForeignKey("Domain.Entities.UserVerificationAndReset", "UserEmail")
                        .HasPrincipalKey("Domain.Entities.User", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User_Role", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CompanyProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Navigation("Borrowers");
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Borrowers");

                    b.Navigation("UserVerificationAndReset")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
