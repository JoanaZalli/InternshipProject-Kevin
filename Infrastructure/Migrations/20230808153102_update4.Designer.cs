// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230808153102_update4")]
    partial class update4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinancePurposeDefinition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.Property<int>("RequestedTenor")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Borrowers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FinnhubIndustry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IPO")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("MarketCapitalization")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ShareOutstanding")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Type");

                    b.ToTable("CompanyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a219ebd3-4c1a-411c-b261-a3b55722860e"),
                            Type = "Sole Proprietorship"
                        },
                        new
                        {
                            Id = new Guid("4ac33fdf-41b6-4f3d-ab44-55fe513149a8"),
                            Type = "Other"
                        },
                        new
                        {
                            Id = new Guid("989bcf62-39b5-4112-9aa8-4f09cb4cd445"),
                            Type = "Partnership Limited by Shares"
                        },
                        new
                        {
                            Id = new Guid("020d97e0-6f1d-4792-ab20-966c06ca961c"),
                            Type = "Limited Partnership"
                        },
                        new
                        {
                            Id = new Guid("3d31c1b7-e050-4fb6-a069-d1852f771cc7"),
                            Type = "Cooperative Society"
                        },
                        new
                        {
                            Id = new Guid("51bbf32d-822d-408c-9eb6-3d5b124e7036"),
                            Type = "General Partnership"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BorrowerCompanyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaxTenor")
                        .HasColumnType("int");

                    b.Property<int>("MinTenor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d70a975e-8f84-460a-9455-58c453379c3e"),
                            BorrowerCompanyType = "Cooperative Society",
                            MaxTenor = 0,
                            MinTenor = 30,
                            Name = "PMI BTECH",
                            RequestedAmount = 100000
                        },
                        new
                        {
                            Id = new Guid("10ff740e-4fc1-4f1c-8b92-e4336f1822dd"),
                            BorrowerCompanyType = "Partnership Limited by Shares",
                            MaxTenor = 60,
                            MinTenor = 40,
                            Name = "AZIF",
                            RequestedAmount = 400000
                        },
                        new
                        {
                            Id = new Guid("55a8ef25-4416-4423-8c80-5e135bf43616"),
                            BorrowerCompanyType = "Sole Proprietorship",
                            MaxTenor = 60,
                            MinTenor = 30,
                            Name = "LOGITECH",
                            RequestedAmount = 100000
                        });
                });

            modelBuilder.Entity("Domain.Entities.LenderMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Spread")
                        .HasColumnType("int");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LenderMatrices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ReferenceRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("LenderId");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33c159ba-e992-40ea-80b5-c50a142cf450"),
                            Name = "IsSuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("c0ac9632-ab15-4db7-8bae-217c623560e9"),
                            Name = "CanReadBorrowers"
                        },
                        new
                        {
                            Id = new Guid("88f9a398-af50-4a5a-8bcc-3dd4c94ffd3a"),
                            Name = "IsRegistered"
                        },
                        new
                        {
                            Id = new Guid("45dc0cfc-2096-472a-916c-e7297aabc09d"),
                            Name = "CanAddBorrower"
                        },
                        new
                        {
                            Id = new Guid("e46d7435-6c4f-4aeb-9872-e3f3452bd392"),
                            Name = "CanUpdateBorrower"
                        },
                        new
                        {
                            Id = new Guid("a8682a19-0301-4c18-b90a-2ccad4fc6537"),
                            Name = "CanDeleteBorrower"
                        },
                        new
                        {
                            Id = new Guid("28c7175d-a210-476b-907c-71a81cffed41"),
                            Name = "CanReadApplications"
                        },
                        new
                        {
                            Id = new Guid("a23e98ac-966e-4459-8107-960d2fa6b3b3"),
                            Name = "CanUpdateApplication"
                        },
                        new
                        {
                            Id = new Guid("a3d95c71-5981-4700-90f7-b432cb88e52f"),
                            Name = "CanAddApplication"
                        },
                        new
                        {
                            Id = new Guid("3180ef81-38af-4aaf-acf1-70f33de1c638"),
                            Name = "CanDeleteApplication"
                        },
                        new
                        {
                            Id = new Guid("a0facd56-2f17-4846-80cb-80e6eb43ce68"),
                            Name = "CanReadOwnApplications"
                        },
                        new
                        {
                            Id = new Guid("414509a5-2249-41a0-99b0-32299075a4bf"),
                            Name = "CanReadOwnBorrowers"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("FinanceMaxAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("FinanceMinAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ReferenceRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fcfab6d-4ad6-4607-a44d-e39d0a89b1a2"),
                            Description = "Installments with pre-amortization at a fixed rate",
                            FinanceMaxAmount = 2000000.00m,
                            FinanceMinAmount = 10000.00m,
                            Name = "Installments with pre-amortization at a fixed rate",
                            ReferenceRate = 0.0025m
                        },
                        new
                        {
                            Id = new Guid("4cb4e9b6-ad9a-41e4-b8f8-0ed1982462d6"),
                            Description = "Installment with variable rate pre-amortization",
                            FinanceMaxAmount = 2000000.00m,
                            FinanceMinAmount = 10000.00m,
                            Name = "Installment with variable rate pre-amortization",
                            ReferenceRate = 0.03m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f364006d-018b-4255-b368-9ce0e6df06c0"),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("c2c231e8-26b5-4aa4-98a1-e373a9f04e4b"),
                            Name = "LoanOfficer"
                        },
                        new
                        {
                            Id = new Guid("f64a131e-e091-4f89-b273-65323100edc1"),
                            Name = "RegisteredUser"
                        },
                        new
                        {
                            Id = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            Name = "Borrower"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("f364006d-018b-4255-b368-9ce0e6df06c0"),
                            PermissionId = new Guid("33c159ba-e992-40ea-80b5-c50a142cf450")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("414509a5-2249-41a0-99b0-32299075a4bf")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("45dc0cfc-2096-472a-916c-e7297aabc09d")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("a8682a19-0301-4c18-b90a-2ccad4fc6537")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("e46d7435-6c4f-4aeb-9872-e3f3452bd392")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("a3d95c71-5981-4700-90f7-b432cb88e52f")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("a0facd56-2f17-4846-80cb-80e6eb43ce68")
                        },
                        new
                        {
                            RoleId = new Guid("844e8eec-bd58-4353-9197-042ebcf9eae9"),
                            PermissionId = new Guid("3180ef81-38af-4aaf-acf1-70f33de1c638")
                        },
                        new
                        {
                            RoleId = new Guid("f64a131e-e091-4f89-b273-65323100edc1"),
                            PermissionId = new Guid("88f9a398-af50-4a5a-8bcc-3dd4c94ffd3a")
                        },
                        new
                        {
                            RoleId = new Guid("f64a131e-e091-4f89-b273-65323100edc1"),
                            PermissionId = new Guid("45dc0cfc-2096-472a-916c-e7297aabc09d")
                        },
                        new
                        {
                            RoleId = new Guid("c2c231e8-26b5-4aa4-98a1-e373a9f04e4b"),
                            PermissionId = new Guid("a23e98ac-966e-4459-8107-960d2fa6b3b3")
                        },
                        new
                        {
                            RoleId = new Guid("c2c231e8-26b5-4aa4-98a1-e373a9f04e4b"),
                            PermissionId = new Guid("28c7175d-a210-476b-907c-71a81cffed41")
                        },
                        new
                        {
                            RoleId = new Guid("c2c231e8-26b5-4aa4-98a1-e373a9f04e4b"),
                            PermissionId = new Guid("c0ac9632-ab15-4db7-8bae-217c623560e9")
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoginTries")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("626b6473-f14c-4910-9428-4ecf54d02eef"),
                            Email = "kevin.shemili@cardoai.com",
                            FirstName = "Kevin",
                            IsBlocked = false,
                            IsEmailConfirmed = true,
                            LastName = "Shemili",
                            LoginTries = 0,
                            PasswordHash = "nsslp9QXF6wOvaGzfIHsoI+23nH+e8+l1SD8bv0IFrI=",
                            PasswordSalt = "jWRLoRafDBcFS72uPEqyqg==",
                            PhoneNumber = "683363203",
                            Prefix = "+355",
                            Username = "kevinshemili1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserVerificationAndReset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("UserVerificationAndReset", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User_Role", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("626b6473-f14c-4910-9428-4ecf54d02eef"),
                            RoleId = new Guid("f364006d-018b-4255-b368-9ce0e6df06c0")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithMany("Applications")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.HasOne("Domain.Entities.CompanyType", "CompanyType")
                        .WithMany("Borrowers")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Borrowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("Domain.Entities.CompanyProfile", "BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationEntity", "Application")
                        .WithOne("Loan")
                        .HasForeignKey("Domain.Entities.Loan", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lender", "Lender")
                        .WithMany("Loans")
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Lender");
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UserVerificationAndReset", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("UserVerificationAndReset")
                        .HasForeignKey("Domain.Entities.UserVerificationAndReset", "UserEmail")
                        .HasPrincipalKey("Domain.Entities.User", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User_Role", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CompanyProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Navigation("Borrowers");
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Borrowers");

                    b.Navigation("UserVerificationAndReset")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
