// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinancePurposeDefinition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.Property<int>("RequestedTenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1f0c15d-7c24-4277-991c-5a30a40abacc"),
                            Name = "In Charge"
                        },
                        new
                        {
                            Id = new Guid("58749e4c-3bd5-4bf4-b86f-e9b0303a015e"),
                            Name = "Loan Canceled"
                        },
                        new
                        {
                            Id = new Guid("287c9a29-9d88-48cb-9aa7-95b33b6fb197"),
                            Name = "Loan Defaulted"
                        },
                        new
                        {
                            Id = new Guid("25275da5-388e-46db-a169-99e1c58d0a7b"),
                            Name = "Loan Disbursed"
                        },
                        new
                        {
                            Id = new Guid("23eadac2-3bbb-421b-9a5b-aff07eb74c41"),
                            Name = "Loan Guaranteed"
                        },
                        new
                        {
                            Id = new Guid("2fbde7f8-a9f1-4857-ac10-f818db1dc8b0"),
                            Name = "Loan Rejected"
                        },
                        new
                        {
                            Id = new Guid("2c656d64-8bcd-4c96-bb96-cd04c231199d"),
                            Name = "Loan Repaid"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Borrowers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FinnhubIndustry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IPO")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("MarketCapitalization")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ShareOutstanding")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Type");

                    b.ToTable("CompanyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7db974f8-6321-4b35-8ef4-65edda9fe1d6"),
                            Description = "Description",
                            Type = "Sole Proprietorship"
                        },
                        new
                        {
                            Id = new Guid("a7eea608-196c-4a52-a5c7-9694e0eb190b"),
                            Description = "Description",
                            Type = "Other"
                        },
                        new
                        {
                            Id = new Guid("67d5fd0e-f3a4-4aa7-bef8-8a587bcb475e"),
                            Description = "Description",
                            Type = "Partnership Limited by Shares"
                        },
                        new
                        {
                            Id = new Guid("b2b5ce14-79b1-402e-92f5-2536bce91dda"),
                            Description = "Description",
                            Type = "Limited Partnership"
                        },
                        new
                        {
                            Id = new Guid("be9a7220-0773-4d4d-8ef7-b5fbf480e952"),
                            Description = "Description",
                            Type = "Cooperative Society"
                        },
                        new
                        {
                            Id = new Guid("afbb07dd-70ad-471d-8448-67539b17b872"),
                            Description = "Description",
                            Type = "General Partnership"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BorrowerCompanyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaxTenor")
                        .HasColumnType("int");

                    b.Property<int>("MinTenor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d1ac5ed-0e1e-4de1-a7fc-a7df9e095653"),
                            BorrowerCompanyType = "Cooperative Society",
                            MaxTenor = 65,
                            MinTenor = 30,
                            Name = "PMI BTECH",
                            RequestedAmount = 100000
                        },
                        new
                        {
                            Id = new Guid("7f83c404-efee-4900-98ee-38d3c95daf56"),
                            BorrowerCompanyType = "Partnership Limited by Shares",
                            MaxTenor = 60,
                            MinTenor = 40,
                            Name = "AZIF",
                            RequestedAmount = 400000
                        },
                        new
                        {
                            Id = new Guid("0f3c377f-89ad-4fd6-af55-62f783b0ea52"),
                            BorrowerCompanyType = "Sole Proprietorship",
                            MaxTenor = 60,
                            MinTenor = 30,
                            Name = "LOGITECH",
                            RequestedAmount = 100000
                        });
                });

            modelBuilder.Entity("Domain.Entities.LenderMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Spread")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LenderMatrices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoanStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ReferenceRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RequestedAmount")
                        .HasColumnType("int");

                    b.Property<int>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("LenderId");

                    b.HasIndex("LoanStatusId");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LoanStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LoanStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("45e0d7e5-0c30-4ee0-b0c6-23379a9bd138"),
                            Name = "Created"
                        },
                        new
                        {
                            Id = new Guid("2dc1c106-6c3d-4af4-98e3-3af497a097f1"),
                            Name = "Erased"
                        },
                        new
                        {
                            Id = new Guid("e8db4469-c42e-4cdc-9848-8ae2b7ecccce"),
                            Name = "Defaulted"
                        },
                        new
                        {
                            Id = new Guid("f28af2b0-4535-49e7-bb11-00054166a910"),
                            Name = "Disbursed"
                        },
                        new
                        {
                            Id = new Guid("60724bc1-b7ce-4c2a-9663-a0b5b1bd252c"),
                            Name = "Guaranteed"
                        },
                        new
                        {
                            Id = new Guid("95269826-ee81-4f28-9783-9bc0d9996300"),
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = new Guid("5318a2e8-6a76-49e6-8b2f-97a8e09e5c8c"),
                            Name = "Repaid"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fc1cbaf-b307-4efa-8ca9-2cced12a6028"),
                            Name = "IsRegistered"
                        },
                        new
                        {
                            Id = new Guid("ff9f62de-ab2a-4ba2-a15d-11a1f214ac66"),
                            Name = "IsSuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("f2a1fba5-a23e-4686-9c0f-3e636b1ac3e4"),
                            Name = "CanReadBorrowers"
                        },
                        new
                        {
                            Id = new Guid("2c9dad73-3625-4ecb-9522-c0f59a003e17"),
                            Name = "CanReadOwnBorrowers"
                        },
                        new
                        {
                            Id = new Guid("d3e011d6-53d4-46c7-8866-840593334476"),
                            Name = "CanAddBorrower"
                        },
                        new
                        {
                            Id = new Guid("96c36a8c-be53-442d-a2f6-b2bcd71b3524"),
                            Name = "CanUpdateBorrower"
                        },
                        new
                        {
                            Id = new Guid("4d74ce4f-b8d9-4c87-8f48-365c00dc612c"),
                            Name = "CanReadApplications"
                        },
                        new
                        {
                            Id = new Guid("a333628c-0918-47dd-9c84-30342e0e95e3"),
                            Name = "CanReadOwnApplications"
                        },
                        new
                        {
                            Id = new Guid("6fe53fc9-8fde-45f2-b3eb-f988e7abd00d"),
                            Name = "CanAddApplication"
                        },
                        new
                        {
                            Id = new Guid("3b12b41c-cdd3-45c8-8466-31750b8d3e3c"),
                            Name = "CanUpdateApplication"
                        },
                        new
                        {
                            Id = new Guid("cd978177-aa39-45f5-b6a6-783b9795196c"),
                            Name = "CanGenerateMatrix"
                        },
                        new
                        {
                            Id = new Guid("2fe0991b-7a0b-4700-8f2c-036782b973bc"),
                            Name = "CanCreateMatrix"
                        },
                        new
                        {
                            Id = new Guid("63f2afd8-c671-4dec-93af-de756e2e6e8a"),
                            Name = "CanUpdateMatrix"
                        },
                        new
                        {
                            Id = new Guid("37e38648-4f5d-48ad-9fab-e8dfe5c6e42c"),
                            Name = "CanDeleteMatrix"
                        },
                        new
                        {
                            Id = new Guid("4f29d160-b6c3-4bff-9bae-d1e6be1dac8b"),
                            Name = "CanAddLoan"
                        },
                        new
                        {
                            Id = new Guid("00e181e4-0549-4ebc-8730-77c901bfe676"),
                            Name = "CanUpdateLoan"
                        },
                        new
                        {
                            Id = new Guid("37704915-ff65-432f-8767-f5320c0ddea5"),
                            Name = "CanReadLoans"
                        },
                        new
                        {
                            Id = new Guid("5b3afd8d-f998-455f-b251-0b38b752c663"),
                            Name = "CanChangeLoanStatus"
                        },
                        new
                        {
                            Id = new Guid("91c8ba0c-269b-4462-802c-cb6f3729fc9f"),
                            Name = "CanReadStatuses"
                        },
                        new
                        {
                            Id = new Guid("3843c5cf-6ad5-4920-8bdd-838de39315e2"),
                            Name = "CanReadLenders"
                        },
                        new
                        {
                            Id = new Guid("11b88057-19b4-4fcc-aada-3bdb20877faf"),
                            Name = "CanReadCompanyTypes"
                        },
                        new
                        {
                            Id = new Guid("52b5a66f-70f9-42e7-aa25-e48171d634a5"),
                            Name = "CanReadProducts"
                        },
                        new
                        {
                            Id = new Guid("7ed78266-c462-4c30-8860-dcd405880646"),
                            Name = "GenerateEligibles"
                        },
                        new
                        {
                            Id = new Guid("943fde30-8f60-4401-a63d-c4218c930882"),
                            Name = "CanReadUsers"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("FinanceMaxAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("FinanceMinAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ReferenceRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ff6a3be-482e-4826-b027-b7aea05de030"),
                            Description = "Description",
                            FinanceMaxAmount = 2000000.00m,
                            FinanceMinAmount = 10000.00m,
                            Name = "Installments with pre-amortization at a fixed rate",
                            ReferenceRate = 0.0025m
                        },
                        new
                        {
                            Id = new Guid("b2c0e6ae-2a83-4fd3-acce-dd1c647b1b1c"),
                            Description = "Description",
                            FinanceMaxAmount = 2000000.00m,
                            FinanceMinAmount = 10000.00m,
                            Name = "Installment with variable rate pre-amortization",
                            ReferenceRate = 0.0025m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1afac8e2-d840-40aa-a97f-c3f2bc5931b0"),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            Name = "LoanOfficer"
                        },
                        new
                        {
                            Id = new Guid("846d0436-ffce-49a2-a8ff-bf22aedf0a83"),
                            Name = "RegisteredUser"
                        },
                        new
                        {
                            Id = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            Name = "Borrower"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("1afac8e2-d840-40aa-a97f-c3f2bc5931b0"),
                            PermissionId = new Guid("ff9f62de-ab2a-4ba2-a15d-11a1f214ac66")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("2c9dad73-3625-4ecb-9522-c0f59a003e17")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("d3e011d6-53d4-46c7-8866-840593334476")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("96c36a8c-be53-442d-a2f6-b2bcd71b3524")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("6fe53fc9-8fde-45f2-b3eb-f988e7abd00d")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("a333628c-0918-47dd-9c84-30342e0e95e3")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("52b5a66f-70f9-42e7-aa25-e48171d634a5")
                        },
                        new
                        {
                            RoleId = new Guid("b05d025a-62ee-4d6c-aef4-9433cc52dcd0"),
                            PermissionId = new Guid("11b88057-19b4-4fcc-aada-3bdb20877faf")
                        },
                        new
                        {
                            RoleId = new Guid("846d0436-ffce-49a2-a8ff-bf22aedf0a83"),
                            PermissionId = new Guid("6fc1cbaf-b307-4efa-8ca9-2cced12a6028")
                        },
                        new
                        {
                            RoleId = new Guid("846d0436-ffce-49a2-a8ff-bf22aedf0a83"),
                            PermissionId = new Guid("d3e011d6-53d4-46c7-8866-840593334476")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("f2a1fba5-a23e-4686-9c0f-3e636b1ac3e4")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("4d74ce4f-b8d9-4c87-8f48-365c00dc612c")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("3b12b41c-cdd3-45c8-8466-31750b8d3e3c")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("cd978177-aa39-45f5-b6a6-783b9795196c")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("2fe0991b-7a0b-4700-8f2c-036782b973bc")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("63f2afd8-c671-4dec-93af-de756e2e6e8a")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("37e38648-4f5d-48ad-9fab-e8dfe5c6e42c")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("4f29d160-b6c3-4bff-9bae-d1e6be1dac8b")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("00e181e4-0549-4ebc-8730-77c901bfe676")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("37704915-ff65-432f-8767-f5320c0ddea5")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("5b3afd8d-f998-455f-b251-0b38b752c663")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("91c8ba0c-269b-4462-802c-cb6f3729fc9f")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("3843c5cf-6ad5-4920-8bdd-838de39315e2")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("11b88057-19b4-4fcc-aada-3bdb20877faf")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("52b5a66f-70f9-42e7-aa25-e48171d634a5")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("7ed78266-c462-4c30-8860-dcd405880646")
                        },
                        new
                        {
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8"),
                            PermissionId = new Guid("943fde30-8f60-4401-a63d-c4218c930882")
                        },
                        new
                        {
                            RoleId = new Guid("846d0436-ffce-49a2-a8ff-bf22aedf0a83"),
                            PermissionId = new Guid("11b88057-19b4-4fcc-aada-3bdb20877faf")
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoginTries")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b2031ff-df77-4ce4-a2f0-00e60546f243"),
                            Email = "kevin.shemili@cardoai.com",
                            FirstName = "Kevin",
                            IsBlocked = false,
                            IsEmailConfirmed = true,
                            LastName = "Shemili",
                            LoginTries = 0,
                            PasswordHash = "nsslp9QXF6wOvaGzfIHsoI+23nH+e8+l1SD8bv0IFrI=",
                            PasswordSalt = "jWRLoRafDBcFS72uPEqyqg==",
                            PhoneNumber = "683363203",
                            Prefix = "+355",
                            Username = "kevinshemili1"
                        },
                        new
                        {
                            Id = new Guid("75aeebba-0d7d-4f8b-a95d-4d9551167c56"),
                            Email = "kevin.shemili@officer.com",
                            FirstName = "KevinLoan",
                            IsBlocked = false,
                            IsEmailConfirmed = true,
                            LastName = "ShemiliLoan",
                            LoginTries = 0,
                            PasswordHash = "nsslp9QXF6wOvaGzfIHsoI+23nH+e8+l1SD8bv0IFrI=",
                            PasswordSalt = "jWRLoRafDBcFS72uPEqyqg==",
                            PhoneNumber = "683363203",
                            Prefix = "+355",
                            Username = "kevinOfficer1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserVerificationAndReset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("UserVerificationAndReset", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User_Role", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1b2031ff-df77-4ce4-a2f0-00e60546f243"),
                            RoleId = new Guid("1afac8e2-d840-40aa-a97f-c3f2bc5931b0")
                        },
                        new
                        {
                            UserId = new Guid("75aeebba-0d7d-4f8b-a95d-4d9551167c56"),
                            RoleId = new Guid("d6013a21-70d7-4c08-9de9-482f339147a8")
                        });
                });

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithMany("Applications")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Borrower");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.HasOne("Domain.Entities.CompanyType", "CompanyType")
                        .WithMany("Borrowers")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Borrowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CompanyProfile", b =>
                {
                    b.HasOne("Domain.Entities.Borrower", "Borrower")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("Domain.Entities.CompanyProfile", "BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("Domain.Entities.Loan", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationEntity", "Application")
                        .WithOne("Loan")
                        .HasForeignKey("Domain.Entities.Loan", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lender", "Lender")
                        .WithMany("Loans")
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LoanStatus", "LoanStatus")
                        .WithMany("Loans")
                        .HasForeignKey("LoanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Lender");

                    b.Navigation("LoanStatus");
                });

            modelBuilder.Entity("Domain.Entities.Role_Permission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.UserVerificationAndReset", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("UserVerificationAndReset")
                        .HasForeignKey("Domain.Entities.UserVerificationAndReset", "UserEmail")
                        .HasPrincipalKey("Domain.Entities.User", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User_Role", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApplicationEntity", b =>
                {
                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Borrower", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CompanyProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CompanyType", b =>
                {
                    b.Navigation("Borrowers");
                });

            modelBuilder.Entity("Domain.Entities.Lender", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Entities.LoanStatus", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Borrowers");

                    b.Navigation("UserVerificationAndReset")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
